{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"metaso-sdk","text":"<p>\u79d8\u5854AI\u641c\u7d22 Python SDK\u3002\u5728\u4f7f\u7528\u8fd9\u4e2a SDK \u4e4b\u524d\uff0c\u8bf7\u5148\u901a\u8fc7API\u6587\u6863\u4e13\u9898\u4e86\u89e3 HTTP \u63a5\u53e3\u7684\u66f4\u591a\u7ec6\u8282\u3002</p>"},{"location":"#_1","title":"\u5b89\u88c5","text":"<pre><code>pip install metaso-sdk\n</code></pre>"},{"location":"#metaso_api_key","title":"\u914d\u7f6e METASO_API_KEY","text":"<p>metaso-sdk \u4ece\u73af\u5883\u53d8\u91cf <code>METASO_API_KEY</code> \u8bfb\u53d6\u7528\u4e8e\u8ba4\u8bc1\u7684 API \u5bc6\u94a5\uff0c\u53ef\u4ee5\u5728 shell \u91cc\u8fdb\u884c\u8bbe\u7f6e\uff1a</p> <pre><code>export METASO_API_KEY=\"mk-EE2...\"\n</code></pre> <p>\u6216\u8005\u5728 Python \u4ee3\u7801\u91cc\u8fdb\u884c\u8bbe\u7f6e\uff1a</p> <pre><code>import os\nos.environ[\"METASO_API_KEY\"] = \"mk-EE2...\"\n</code></pre>"},{"location":"#_2","title":"\u641c\u7d22","text":""},{"location":"#_3","title":"\u641c\u7d22\u95ee\u9898","text":"<pre><code>from metaso_sdk import search, Query\nsearch(Query(question=\"abc\"))\n</code></pre>"},{"location":"#_4","title":"\u8ffd\u95ee","text":"<pre><code>search(Query(question=\"\u5e7f\u64ad\u516c\u53f8\", sessionId=\"8550018047390023680\"))\n</code></pre>"},{"location":"#_5","title":"\u6d41\u5f0f\u8fd4\u56de","text":"<pre><code>for chunk in search(Query(question=\"abc\"), stream=True):\n    print(chunk)\n\n...\n{'type': 'heartbeat'}\n{'text': '\u56e0\u6b64\uff0c\u201cabc\u201d\u53ef\u4ee5\u6307\u4ee3\u5b57\u6bcd\u8868\u7684\u524d\u4e09\u4e2a\u5b57\u6bcd\u3001\u7f8e\u7c4d\u534e\u88d4\u3001\u7f8e\u56fd\u5e7f\u64ad\u516c\u53f8\u3001\u4e00\u79cd\u97f3\u4e50\u8bb0\u8c31\u6cd5\u4ee5\u53ca\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u3002\u5177\u4f53\u542b\u4e49\u9700\u8981\u6839\u636e\u4e0a\u4e0b\u6587\u6765\u786e\u5b9a\u3002', 'type': 'append-text'}\n</code></pre>"},{"location":"#_6","title":"\u4e13\u9898","text":""},{"location":"#_7","title":"\u9012\u5f52\u4e0a\u4f20\u6587\u4ef6\u5939","text":"<pre><code>from metaso_sdk import create_topic, upload_directory, Topic\n\ntopic = create_topic(Topic(name=\"functional programing\"))\nfiles = upload_directory(topic, \"dir\")\n</code></pre>"},{"location":"#_8","title":"\u641c\u7d22\u7279\u5b9a\u4e13\u9898","text":"<pre><code>from metaso_sdk import search, Query\n\nquery = Query(question=\"functional\")\nsearch(query, topic=topic)\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>0.1.0: \u4e13\u9898\u76f8\u5173\u63a5\u53e3\u3002 0.1.1: \u641c\u7d22\u652f\u6301\u6df7\u5408\u6a21\u5f0f\u5f00\u5173 enableMix\u3002 0.1.3: \u641c\u7d22\u652f\u6301 newEngine \u5f00\u5173\u3002 0.1.4: update_progress \u68c0\u67e5 errCode == 0 0.1.5: \u652f\u6301\u4e0a\u4f20\u6587\u4ef6\u6216 URL \u5230\u4e66\u67b6\u3002 0.1.6: \u975e 200 \u72b6\u6001\u7801\u629b\u5f02\u5e38\u3002</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd metaso-sdk\nmake setup\n</code></pre> <p>Note</p> <p> If it fails for some reason, you'll need to install uv manually.</p> <p>You can install it with:</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>uv sync</code>.</p> <p>You now have the dependencies installed.</p> <p>You can run the application with <code>make run metaso [ARGS...]</code>.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>The entry-point to run commands and tasks is the <code>make</code> Python script, located in the <code>scripts</code> directory. Try running <code>make</code> to show the available commands and tasks. The commands do not need the Python dependencies to be installed, while the tasks do. The cross-platform tasks are written in Python, thanks to duty.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2024 MetaSota\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> metaso_sdk<ul> <li> bookshelf</li> <li> cli</li> <li> client</li> <li> debug</li> <li> model</li> <li> search</li> <li> subject</li> </ul> </li> </ul>"},{"location":"reference/metaso_sdk/","title":"metaso_sdk","text":""},{"location":"reference/metaso_sdk/#metaso_sdk","title":"metaso_sdk","text":"<p>metaso-sdk package.</p> <p>The official Python SDK for https://metaso.cn</p> <p>Modules:</p> <ul> <li> <code>bookshelf</code>           \u2013            </li> <li> <code>cli</code>           \u2013            <p>Module that contains the command line application.</p> </li> <li> <code>debug</code>           \u2013            <p>Debugging utilities.</p> </li> <li> <code>search</code>           \u2013            </li> <li> <code>subject</code>           \u2013            </li> </ul> <p>Functions:</p> <ul> <li> <code>create_topic</code>             \u2013              <p>\u521b\u5efa\u4e00\u4e2a\u65b0\u4e13\u9898\u3002</p> </li> <li> <code>delete_file</code>             \u2013              <p>\u5220\u9664\u6587\u4ef6\u3002</p> </li> <li> <code>delete_topic</code>             \u2013              <p>\u5220\u9664\u6307\u5b9a\u7684\u4e13\u9898\u3002</p> </li> <li> <code>update_progress</code>             \u2013              <p>\u66f4\u65b0\u5904\u7406\u8fdb\u5ea6\u3002</p> </li> <li> <code>upload_book</code>             \u2013              <p>\u4e0a\u4f20\u6587\u4ef6\u6216 URL \u5230\u4e66\u67b6\u3002</p> </li> <li> <code>upload_directory</code>             \u2013              <p>\u9012\u5f52\u4e0a\u4f20\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u5230\u6307\u5b9a\u4e13\u9898\u3002</p> </li> <li> <code>upload_file</code>             \u2013              <p>\u4e0a\u4f20\u6587\u4ef6\u5230\u6307\u5b9a\u4e13\u9898\u3002</p> </li> </ul>"},{"location":"reference/metaso_sdk/#metaso_sdk.create_topic","title":"create_topic","text":"<pre><code>create_topic(topic: Topic) -&gt; Optional[Topic]\n</code></pre> <p>\u521b\u5efa\u4e00\u4e2a\u65b0\u4e13\u9898\u3002</p> <p>:param topic (Topic): \u8981\u521b\u5efa\u7684\u4e13\u9898\u5bf9\u8c61\u3002 :return: \u4e13\u9898\u5bf9\u8c61\u3002</p> Source code in <code>src/metaso_sdk/subject.py</code> <pre><code>def create_topic(topic: Topic) -&gt; Optional[Topic]:\n    \"\"\"\u521b\u5efa\u4e00\u4e2a\u65b0\u4e13\u9898\u3002\n\n    :param topic (Topic): \u8981\u521b\u5efa\u7684\u4e13\u9898\u5bf9\u8c61\u3002\n    :return: \u4e13\u9898\u5bf9\u8c61\u3002\n    \"\"\"\n    resp = client.put(\"/topic\", json=topic.model_dump())\n    resp.raise_for_status()\n    json = resp.json()\n    status = Status.model_validate(json)\n    if status.errCode == 0:\n        topic = Topic.model_validate(json[\"data\"])\n        return topic\n</code></pre>"},{"location":"reference/metaso_sdk/#metaso_sdk.delete_file","title":"delete_file","text":"<pre><code>delete_file(file_or_book: Union[File, Book]) -&gt; bool\n</code></pre> <p>\u5220\u9664\u6587\u4ef6\u3002</p> <p>:param file_or_book: \u5f85\u5220\u9664\u7684 File \u6216\u8005 Book \u5bf9\u8c61\u3002 :return: \u5982\u679c\u5220\u9664\u6210\u529f\uff0c\u8fd4\u56deTrue\u3002\u5426\u5219\u8fd4\u56deFalse\u3002</p> Source code in <code>src/metaso_sdk/subject.py</code> <pre><code>def delete_file(file_or_book: Union[File, Book]) -&gt; bool:\n    \"\"\"\u5220\u9664\u6587\u4ef6\u3002\n\n    :param file_or_book: \u5f85\u5220\u9664\u7684 File \u6216\u8005 Book \u5bf9\u8c61\u3002\n    :return: \u5982\u679c\u5220\u9664\u6210\u529f\uff0c\u8fd4\u56deTrue\u3002\u5426\u5219\u8fd4\u56deFalse\u3002\n    \"\"\"\n    file_id = file_or_book.id if isinstance(file_or_book, File) else file_or_book.fileId\n    resp = client.post(\"/file/trash\", json={\"ids\": [file_id]})\n    resp.raise_for_status()\n    status = Status.model_validate(resp.json())\n    return status.errCode == 0\n</code></pre>"},{"location":"reference/metaso_sdk/#metaso_sdk.delete_topic","title":"delete_topic","text":"<pre><code>delete_topic(topic: Topic) -&gt; bool\n</code></pre> <p>\u5220\u9664\u6307\u5b9a\u7684\u4e13\u9898\u3002</p> <p>:param topic (Topic): \u8981\u5220\u9664\u7684Topic\u5bf9\u8c61\u3002 :return: \u5982\u679c\u6210\u529f\u5220\u9664Topic\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse\u3002</p> Source code in <code>src/metaso_sdk/subject.py</code> <pre><code>def delete_topic(topic: Topic) -&gt; bool:\n    \"\"\"\u5220\u9664\u6307\u5b9a\u7684\u4e13\u9898\u3002\n\n    :param topic (Topic): \u8981\u5220\u9664\u7684Topic\u5bf9\u8c61\u3002\n    :return: \u5982\u679c\u6210\u529f\u5220\u9664Topic\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse\u3002\n    \"\"\"\n    resp = client.post(\"/topic/trash\", json={\"ids\": [topic.id]})\n    resp.raise_for_status()\n    status = Status.model_validate(resp.json())\n    return status.errCode == 0\n</code></pre>"},{"location":"reference/metaso_sdk/#metaso_sdk.update_progress","title":"update_progress","text":"<pre><code>update_progress(\n    file_or_book: Union[File, Book],\n) -&gt; Union[File, Book]\n</code></pre> <p>\u66f4\u65b0\u5904\u7406\u8fdb\u5ea6\u3002</p> <p>:param file_or_book: \u5f85\u66f4\u65b0\u8fdb\u5ea6\u7684 File \u6216\u8005 Book \u5bf9\u8c61\u3002 :return: \u66f4\u65b0 progress \u540e\u7684\u5bf9\u8c61\u3002</p> Source code in <code>src/metaso_sdk/subject.py</code> <pre><code>def update_progress(file_or_book: Union[File, Book]) -&gt; Union[File, Book]:\n    \"\"\"\u66f4\u65b0\u5904\u7406\u8fdb\u5ea6\u3002\n\n    :param file_or_book: \u5f85\u66f4\u65b0\u8fdb\u5ea6\u7684 File \u6216\u8005 Book \u5bf9\u8c61\u3002\n    :return: \u66f4\u65b0 progress \u540e\u7684\u5bf9\u8c61\u3002\n    \"\"\"\n    file_id = file_or_book.id if isinstance(file_or_book, File) else file_or_book.fileId\n    resp = client.get(f\"/file/{file_id}/progress\")\n    resp.raise_for_status()\n    json = resp.json()\n    status = Status.model_validate(json)\n    if status.errCode == 0:\n        file_or_book.progress = json[\"data\"]\n    return file_or_book\n</code></pre>"},{"location":"reference/metaso_sdk/#metaso_sdk.upload_book","title":"upload_book","text":"<pre><code>upload_book(fileobj_or_url) -&gt; Optional[Book]\n</code></pre> <p>\u4e0a\u4f20\u6587\u4ef6\u6216 URL \u5230\u4e66\u67b6\u3002</p> <p>:param fileobj_or_url: \u5f85\u4e0a\u4f20\u7684\u6587\u4ef6\u5bf9\u8c61\u6216\u5219 URL\u3002 :return: \u5982\u679c\u6587\u4ef6\u4e0a\u4f20\u6210\u529f\uff0c\u8fd4\u56de Book \u5bf9\u8c61\uff1b\u5426\u5219\u8fd4\u56de None\u3002</p> Source code in <code>src/metaso_sdk/bookshelf.py</code> <pre><code>def upload_book(fileobj_or_url) -&gt; Optional[Book]:\n    \"\"\"\u4e0a\u4f20\u6587\u4ef6\u6216 URL \u5230\u4e66\u67b6\u3002\n\n    :param fileobj_or_url: \u5f85\u4e0a\u4f20\u7684\u6587\u4ef6\u5bf9\u8c61\u6216\u5219 URL\u3002\n    :return: \u5982\u679c\u6587\u4ef6\u4e0a\u4f20\u6210\u529f\uff0c\u8fd4\u56de Book \u5bf9\u8c61\uff1b\u5426\u5219\u8fd4\u56de None\u3002\n    \"\"\"\n    if isinstance(fileobj_or_url, str):\n        params = {\"data\": {\"url\": fileobj_or_url}}\n    else:\n        params = {\"files\": {\"file\": fileobj_or_url}}\n    resp = client.put(\"/book\", **params)\n    resp.raise_for_status()\n    json = resp.json()\n    status = Status.model_validate(json)\n    if status.errCode == 0:\n        book = Book.model_validate(json[\"data\"])\n        return book\n</code></pre>"},{"location":"reference/metaso_sdk/#metaso_sdk.upload_directory","title":"upload_directory","text":"<pre><code>upload_directory(\n    topic: Topic,\n    path: Path,\n    pattern=\"**/*\",\n    *,\n    concurrency=10\n) -&gt; List[File]\n</code></pre> <p>\u9012\u5f52\u4e0a\u4f20\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u5230\u6307\u5b9a\u4e13\u9898\u3002</p> <p>\u53c2\u6570: - topic: \u76ee\u6807\u4e13\u9898\u3002 - path: \u9700\u8981\u4e0a\u4f20\u7684\u672c\u5730\u76ee\u5f55\u8def\u5f84\u3002 - pattern: \u6587\u4ef6\u5339\u914d\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u4e3a\"*/\"\uff0c\u8868\u793a\u5339\u914d\u6240\u6709\u6587\u4ef6\u3002 - concurrency: \u5e76\u53d1\u4e0a\u4f20\u7684\u6570\u91cf\uff0c\u9ed8\u8ba4\u4e3a10\u3002</p> <p>\u8fd4\u56de: - List[File]: \u6210\u529f\u4e0a\u4f20\u7684\u6587\u4ef6\u5217\u8868\u3002</p> Source code in <code>src/metaso_sdk/subject.py</code> <pre><code>def upload_directory(topic: Topic, path: Path, pattern=\"**/*\", *, concurrency=10) -&gt; List[File]:\n    \"\"\"\u9012\u5f52\u4e0a\u4f20\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u5230\u6307\u5b9a\u4e13\u9898\u3002\n\n    \u53c2\u6570:\n    - topic: \u76ee\u6807\u4e13\u9898\u3002\n    - path: \u9700\u8981\u4e0a\u4f20\u7684\u672c\u5730\u76ee\u5f55\u8def\u5f84\u3002\n    - pattern: \u6587\u4ef6\u5339\u914d\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u4e3a\"**/*\"\uff0c\u8868\u793a\u5339\u914d\u6240\u6709\u6587\u4ef6\u3002\n    - concurrency: \u5e76\u53d1\u4e0a\u4f20\u7684\u6570\u91cf\uff0c\u9ed8\u8ba4\u4e3a10\u3002\n\n    \u8fd4\u56de:\n    - List[File]: \u6210\u529f\u4e0a\u4f20\u7684\u6587\u4ef6\u5217\u8868\u3002\n    \"\"\"\n\n    def _upload_file(file) -&gt; File:\n        with file.open(\"rb\") as f:\n            return upload_file(topic, f)\n\n    files = list(\n        Stream(Path(path).glob(pattern))\n        .filter(Path.is_file)\n        .map(_upload_file, concurrency=concurrency)\n        .filter(lambda file: file is not None)\n        .observe(\"files\")\n        .catch(),\n    )\n\n    return files\n</code></pre>"},{"location":"reference/metaso_sdk/#metaso_sdk.upload_file","title":"upload_file","text":"<pre><code>upload_file(topic: Topic, file) -&gt; Optional[File]\n</code></pre> <p>\u4e0a\u4f20\u6587\u4ef6\u5230\u6307\u5b9a\u4e13\u9898\u3002</p> <p>:param topic (Topic): \u6587\u4ef6\u6240\u5c5e\u7684\u4e13\u9898\u3002 :param file: \u5f85\u4e0a\u4f20\u7684\u6587\u4ef6\u5bf9\u8c61\u3002 :return: \u5982\u679c\u6587\u4ef6\u4e0a\u4f20\u6210\u529f\uff0c\u8fd4\u56de\u6587\u4ef6\u5bf9\u8c61\uff1b\u5426\u5219\u8fd4\u56deNone\u3002</p> Source code in <code>src/metaso_sdk/subject.py</code> <pre><code>def upload_file(topic: Topic, file) -&gt; Optional[File]:\n    \"\"\"\u4e0a\u4f20\u6587\u4ef6\u5230\u6307\u5b9a\u4e13\u9898\u3002\n\n    :param topic (Topic): \u6587\u4ef6\u6240\u5c5e\u7684\u4e13\u9898\u3002\n    :param file: \u5f85\u4e0a\u4f20\u7684\u6587\u4ef6\u5bf9\u8c61\u3002\n    :return: \u5982\u679c\u6587\u4ef6\u4e0a\u4f20\u6210\u529f\uff0c\u8fd4\u56de\u6587\u4ef6\u5bf9\u8c61\uff1b\u5426\u5219\u8fd4\u56deNone\u3002\n    \"\"\"\n    resp = client.put(f\"/file/{topic.dirRootId}\", files={\"file\": file})\n    resp.raise_for_status()\n    json = resp.json()\n    status = Status.model_validate(json)\n    if status.errCode == 0:\n        file = File.model_validate(json[\"data\"][0])\n        return file\n</code></pre>"},{"location":"reference/metaso_sdk/bookshelf/","title":"metaso_sdk.bookshelf","text":""},{"location":"reference/metaso_sdk/bookshelf/#metaso_sdk.bookshelf","title":"bookshelf","text":"<p>Functions:</p> <ul> <li> <code>upload_book</code>             \u2013              <p>\u4e0a\u4f20\u6587\u4ef6\u6216 URL \u5230\u4e66\u67b6\u3002</p> </li> </ul>"},{"location":"reference/metaso_sdk/bookshelf/#metaso_sdk.bookshelf.upload_book","title":"upload_book","text":"<pre><code>upload_book(fileobj_or_url) -&gt; Optional[Book]\n</code></pre> <p>\u4e0a\u4f20\u6587\u4ef6\u6216 URL \u5230\u4e66\u67b6\u3002</p> <p>:param fileobj_or_url: \u5f85\u4e0a\u4f20\u7684\u6587\u4ef6\u5bf9\u8c61\u6216\u5219 URL\u3002 :return: \u5982\u679c\u6587\u4ef6\u4e0a\u4f20\u6210\u529f\uff0c\u8fd4\u56de Book \u5bf9\u8c61\uff1b\u5426\u5219\u8fd4\u56de None\u3002</p> Source code in <code>src/metaso_sdk/bookshelf.py</code> <pre><code>def upload_book(fileobj_or_url) -&gt; Optional[Book]:\n    \"\"\"\u4e0a\u4f20\u6587\u4ef6\u6216 URL \u5230\u4e66\u67b6\u3002\n\n    :param fileobj_or_url: \u5f85\u4e0a\u4f20\u7684\u6587\u4ef6\u5bf9\u8c61\u6216\u5219 URL\u3002\n    :return: \u5982\u679c\u6587\u4ef6\u4e0a\u4f20\u6210\u529f\uff0c\u8fd4\u56de Book \u5bf9\u8c61\uff1b\u5426\u5219\u8fd4\u56de None\u3002\n    \"\"\"\n    if isinstance(fileobj_or_url, str):\n        params = {\"data\": {\"url\": fileobj_or_url}}\n    else:\n        params = {\"files\": {\"file\": fileobj_or_url}}\n    resp = client.put(\"/book\", **params)\n    resp.raise_for_status()\n    json = resp.json()\n    status = Status.model_validate(json)\n    if status.errCode == 0:\n        book = Book.model_validate(json[\"data\"])\n        return book\n</code></pre>"},{"location":"reference/metaso_sdk/cli/","title":"metaso_sdk.cli","text":""},{"location":"reference/metaso_sdk/cli/#metaso_sdk.cli","title":"cli","text":"<p>Module that contains the command line application.</p> <p>Functions:</p> <ul> <li> <code>get_parser</code>             \u2013              <p>Return the CLI argument parser.</p> </li> <li> <code>main</code>             \u2013              <p>Run the main program.</p> </li> </ul>"},{"location":"reference/metaso_sdk/cli/#metaso_sdk.cli.get_parser","title":"get_parser","text":"<pre><code>get_parser() -&gt; ArgumentParser\n</code></pre> <p>Return the CLI argument parser.</p> <p>Returns:</p> <ul> <li> <code>ArgumentParser</code>           \u2013            <p>An argparse parser.</p> </li> </ul> Source code in <code>src/metaso_sdk/cli.py</code> <pre><code>def get_parser() -&gt; argparse.ArgumentParser:\n    \"\"\"Return the CLI argument parser.\n\n    Returns:\n        An argparse parser.\n    \"\"\"\n    parser = argparse.ArgumentParser(prog=\"metaso\")\n    parser.add_argument(\"-V\", \"--version\", action=\"version\", version=f\"%(prog)s {debug.get_version()}\")\n    parser.add_argument(\"--debug-info\", action=_DebugInfo, help=\"Print debug information.\")\n    return parser\n</code></pre>"},{"location":"reference/metaso_sdk/cli/#metaso_sdk.cli.main","title":"main","text":"<pre><code>main(args: list[str] | None = None) -&gt; int\n</code></pre> <p>Run the main program.</p> <p>This function is executed when you type <code>metaso</code> or <code>python -m metaso_sdk</code>.</p> <p>Parameters:</p> <ul> <li> <code>args</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Arguments passed from the command line.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>An exit code.</p> </li> </ul> Source code in <code>src/metaso_sdk/cli.py</code> <pre><code>def main(args: list[str] | None = None) -&gt; int:\n    \"\"\"Run the main program.\n\n    This function is executed when you type `metaso` or `python -m metaso_sdk`.\n\n    Parameters:\n        args: Arguments passed from the command line.\n\n    Returns:\n        An exit code.\n    \"\"\"\n    parser = get_parser()\n    opts = parser.parse_args(args=args)\n    print(opts)\n    return 0\n</code></pre>"},{"location":"reference/metaso_sdk/client/","title":"metaso_sdk.client","text":""},{"location":"reference/metaso_sdk/client/#metaso_sdk.client","title":"client","text":""},{"location":"reference/metaso_sdk/debug/","title":"metaso_sdk.debug","text":""},{"location":"reference/metaso_sdk/debug/#metaso_sdk.debug","title":"debug","text":"<p>Debugging utilities.</p> <p>Classes:</p> <ul> <li> <code>Environment</code>           \u2013            <p>Dataclass to store environment information.</p> </li> <li> <code>Package</code>           \u2013            <p>Dataclass describing a Python package.</p> </li> <li> <code>Variable</code>           \u2013            <p>Dataclass describing an environment variable.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>get_debug_info</code>             \u2013              <p>Get debug/environment information.</p> </li> <li> <code>get_version</code>             \u2013              <p>Get version of the given distribution.</p> </li> <li> <code>print_debug_info</code>             \u2013              <p>Print debug/environment information.</p> </li> </ul>"},{"location":"reference/metaso_sdk/debug/#metaso_sdk.debug.Environment","title":"Environment  <code>dataclass</code>","text":"<pre><code>Environment(\n    interpreter_name: str,\n    interpreter_version: str,\n    interpreter_path: str,\n    platform: str,\n    packages: list[Package],\n    variables: list[Variable],\n)\n</code></pre> <p>Dataclass to store environment information.</p> <p>Attributes:</p> <ul> <li> <code>interpreter_name</code>               (<code>str</code>)           \u2013            <p>Python interpreter name.</p> </li> <li> <code>interpreter_path</code>               (<code>str</code>)           \u2013            <p>Path to Python executable.</p> </li> <li> <code>interpreter_version</code>               (<code>str</code>)           \u2013            <p>Python interpreter version.</p> </li> <li> <code>packages</code>               (<code>list[Package]</code>)           \u2013            <p>Installed packages.</p> </li> <li> <code>platform</code>               (<code>str</code>)           \u2013            <p>Operating System.</p> </li> <li> <code>variables</code>               (<code>list[Variable]</code>)           \u2013            <p>Environment variables.</p> </li> </ul>"},{"location":"reference/metaso_sdk/debug/#metaso_sdk.debug.Environment.interpreter_name","title":"interpreter_name  <code>instance-attribute</code>","text":"<pre><code>interpreter_name: str\n</code></pre> <p>Python interpreter name.</p>"},{"location":"reference/metaso_sdk/debug/#metaso_sdk.debug.Environment.interpreter_path","title":"interpreter_path  <code>instance-attribute</code>","text":"<pre><code>interpreter_path: str\n</code></pre> <p>Path to Python executable.</p>"},{"location":"reference/metaso_sdk/debug/#metaso_sdk.debug.Environment.interpreter_version","title":"interpreter_version  <code>instance-attribute</code>","text":"<pre><code>interpreter_version: str\n</code></pre> <p>Python interpreter version.</p>"},{"location":"reference/metaso_sdk/debug/#metaso_sdk.debug.Environment.packages","title":"packages  <code>instance-attribute</code>","text":"<pre><code>packages: list[Package]\n</code></pre> <p>Installed packages.</p>"},{"location":"reference/metaso_sdk/debug/#metaso_sdk.debug.Environment.platform","title":"platform  <code>instance-attribute</code>","text":"<pre><code>platform: str\n</code></pre> <p>Operating System.</p>"},{"location":"reference/metaso_sdk/debug/#metaso_sdk.debug.Environment.variables","title":"variables  <code>instance-attribute</code>","text":"<pre><code>variables: list[Variable]\n</code></pre> <p>Environment variables.</p>"},{"location":"reference/metaso_sdk/debug/#metaso_sdk.debug.Package","title":"Package  <code>dataclass</code>","text":"<pre><code>Package(name: str, version: str)\n</code></pre> <p>Dataclass describing a Python package.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Package name.</p> </li> <li> <code>version</code>               (<code>str</code>)           \u2013            <p>Package version.</p> </li> </ul>"},{"location":"reference/metaso_sdk/debug/#metaso_sdk.debug.Package.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Package name.</p>"},{"location":"reference/metaso_sdk/debug/#metaso_sdk.debug.Package.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version: str\n</code></pre> <p>Package version.</p>"},{"location":"reference/metaso_sdk/debug/#metaso_sdk.debug.Variable","title":"Variable  <code>dataclass</code>","text":"<pre><code>Variable(name: str, value: str)\n</code></pre> <p>Dataclass describing an environment variable.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Variable name.</p> </li> <li> <code>value</code>               (<code>str</code>)           \u2013            <p>Variable value.</p> </li> </ul>"},{"location":"reference/metaso_sdk/debug/#metaso_sdk.debug.Variable.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Variable name.</p>"},{"location":"reference/metaso_sdk/debug/#metaso_sdk.debug.Variable.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre> <p>Variable value.</p>"},{"location":"reference/metaso_sdk/debug/#metaso_sdk.debug.get_debug_info","title":"get_debug_info","text":"<pre><code>get_debug_info() -&gt; Environment\n</code></pre> <p>Get debug/environment information.</p> <p>Returns:</p> <ul> <li> <code>Environment</code>           \u2013            <p>Environment information.</p> </li> </ul> Source code in <code>src/metaso_sdk/debug.py</code> <pre><code>def get_debug_info() -&gt; Environment:\n    \"\"\"Get debug/environment information.\n\n    Returns:\n        Environment information.\n    \"\"\"\n    py_name, py_version = _interpreter_name_version()\n    packages = [\"metaso-sdk\"]\n    variables = [\"PYTHONPATH\", *[var for var in os.environ if var.startswith(\"METASO_SDK\")]]\n    return Environment(\n        interpreter_name=py_name,\n        interpreter_version=py_version,\n        interpreter_path=sys.executable,\n        platform=platform.platform(),\n        variables=[Variable(var, val) for var in variables if (val := os.getenv(var))],\n        packages=[Package(pkg, get_version(pkg)) for pkg in packages],\n    )\n</code></pre>"},{"location":"reference/metaso_sdk/debug/#metaso_sdk.debug.get_version","title":"get_version","text":"<pre><code>get_version(dist: str = 'metaso-sdk') -&gt; str\n</code></pre> <p>Get version of the given distribution.</p> <p>Parameters:</p> <ul> <li> <code>dist</code>               (<code>str</code>, default:                   <code>'metaso-sdk'</code> )           \u2013            <p>A distribution name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A version number.</p> </li> </ul> Source code in <code>src/metaso_sdk/debug.py</code> <pre><code>def get_version(dist: str = \"metaso-sdk\") -&gt; str:\n    \"\"\"Get version of the given distribution.\n\n    Parameters:\n        dist: A distribution name.\n\n    Returns:\n        A version number.\n    \"\"\"\n    try:\n        return metadata.version(dist)\n    except metadata.PackageNotFoundError:\n        return \"0.0.0\"\n</code></pre>"},{"location":"reference/metaso_sdk/debug/#metaso_sdk.debug.print_debug_info","title":"print_debug_info","text":"<pre><code>print_debug_info() -&gt; None\n</code></pre> <p>Print debug/environment information.</p> Source code in <code>src/metaso_sdk/debug.py</code> <pre><code>def print_debug_info() -&gt; None:\n    \"\"\"Print debug/environment information.\"\"\"\n    info = get_debug_info()\n    print(f\"- __System__: {info.platform}\")\n    print(f\"- __Python__: {info.interpreter_name} {info.interpreter_version} ({info.interpreter_path})\")\n    print(\"- __Environment variables__:\")\n    for var in info.variables:\n        print(f\"  - `{var.name}`: `{var.value}`\")\n    print(\"- __Installed packages__:\")\n    for pkg in info.packages:\n        print(f\"  - `{pkg.name}` v{pkg.version}\")\n</code></pre>"},{"location":"reference/metaso_sdk/model/","title":"metaso_sdk.model","text":""},{"location":"reference/metaso_sdk/model/#metaso_sdk.model","title":"model","text":""},{"location":"reference/metaso_sdk/search/","title":"metaso_sdk.search","text":""},{"location":"reference/metaso_sdk/search/#metaso_sdk.search","title":"search","text":"<p>Functions:</p> <ul> <li> <code>search</code>             \u2013              <p>\u641c\u7d22\u529f\u80fd\u7684\u51fd\u6570\u6ce8\u91ca\u3002</p> </li> </ul>"},{"location":"reference/metaso_sdk/search/#metaso_sdk.search.search","title":"search","text":"<pre><code>search(\n    query: Query,\n    *,\n    stream: bool = False,\n    topic: Topic = None\n)\n</code></pre> <p>\u641c\u7d22\u529f\u80fd\u7684\u51fd\u6570\u6ce8\u91ca\u3002</p> <p>:param query: \u67e5\u8be2\u5bf9\u8c61\uff0c\u7528\u4e8e\u6307\u5b9a\u641c\u7d22\u5185\u5bb9\u3002 :param stream: \u5e03\u5c14\u503c\uff0c\u8868\u793a\u662f\u5426\u4ee5\u6d41\u7684\u5f62\u5f0f\u8fd4\u56de\u7ed3\u679c\uff0c\u9ed8\u8ba4\u4e3aFalse\u3002 :param topic: \u4e13\u9898\u5bf9\u8c61\uff0c\u7528\u4e8e\u6307\u5b9a\u641c\u7d22\u7684\u4e13\u9898\uff0c\u9ed8\u8ba4\u4e3aNone\u3002 :return: \u6839\u636e\u67e5\u8be2\u6761\u4ef6\u8fd4\u56de\u641c\u7d22\u7ed3\u679c\u3002</p> Source code in <code>src/metaso_sdk/search.py</code> <pre><code>def search(query: Query, *, stream: bool = False, topic: Topic = None):\n    \"\"\"\u641c\u7d22\u529f\u80fd\u7684\u51fd\u6570\u6ce8\u91ca\u3002\n\n    :param query: \u67e5\u8be2\u5bf9\u8c61\uff0c\u7528\u4e8e\u6307\u5b9a\u641c\u7d22\u5185\u5bb9\u3002\n    :param stream: \u5e03\u5c14\u503c\uff0c\u8868\u793a\u662f\u5426\u4ee5\u6d41\u7684\u5f62\u5f0f\u8fd4\u56de\u7ed3\u679c\uff0c\u9ed8\u8ba4\u4e3aFalse\u3002\n    :param topic: \u4e13\u9898\u5bf9\u8c61\uff0c\u7528\u4e8e\u6307\u5b9a\u641c\u7d22\u7684\u4e13\u9898\uff0c\u9ed8\u8ba4\u4e3aNone\u3002\n    :return: \u6839\u636e\u67e5\u8be2\u6761\u4ef6\u8fd4\u56de\u641c\u7d22\u7ed3\u679c\u3002\n    \"\"\"\n    if topic is not None:\n        query.searchTopicId = topic.id\n\n    if stream:\n        query.stream = True\n\n    def _gen():\n        with connect_sse(client, \"POST\", \"/search/v2\", json=query.model_dump()) as event_source:\n            for sse in event_source.iter_sse():\n                if (data := sse.data) != \"[DONE]\":\n                    yield json.loads(data)\n\n    if query.stream:\n        return _gen()\n\n    resp = client.post(\"/search/v2\", json=query.model_dump())\n    resp.raise_for_status()\n    return resp.json()[\"data\"]\n</code></pre>"},{"location":"reference/metaso_sdk/subject/","title":"metaso_sdk.subject","text":""},{"location":"reference/metaso_sdk/subject/#metaso_sdk.subject","title":"subject","text":"<p>Functions:</p> <ul> <li> <code>create_topic</code>             \u2013              <p>\u521b\u5efa\u4e00\u4e2a\u65b0\u4e13\u9898\u3002</p> </li> <li> <code>delete_file</code>             \u2013              <p>\u5220\u9664\u6587\u4ef6\u3002</p> </li> <li> <code>delete_topic</code>             \u2013              <p>\u5220\u9664\u6307\u5b9a\u7684\u4e13\u9898\u3002</p> </li> <li> <code>update_progress</code>             \u2013              <p>\u66f4\u65b0\u5904\u7406\u8fdb\u5ea6\u3002</p> </li> <li> <code>upload_directory</code>             \u2013              <p>\u9012\u5f52\u4e0a\u4f20\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u5230\u6307\u5b9a\u4e13\u9898\u3002</p> </li> <li> <code>upload_file</code>             \u2013              <p>\u4e0a\u4f20\u6587\u4ef6\u5230\u6307\u5b9a\u4e13\u9898\u3002</p> </li> </ul>"},{"location":"reference/metaso_sdk/subject/#metaso_sdk.subject.create_topic","title":"create_topic","text":"<pre><code>create_topic(topic: Topic) -&gt; Optional[Topic]\n</code></pre> <p>\u521b\u5efa\u4e00\u4e2a\u65b0\u4e13\u9898\u3002</p> <p>:param topic (Topic): \u8981\u521b\u5efa\u7684\u4e13\u9898\u5bf9\u8c61\u3002 :return: \u4e13\u9898\u5bf9\u8c61\u3002</p> Source code in <code>src/metaso_sdk/subject.py</code> <pre><code>def create_topic(topic: Topic) -&gt; Optional[Topic]:\n    \"\"\"\u521b\u5efa\u4e00\u4e2a\u65b0\u4e13\u9898\u3002\n\n    :param topic (Topic): \u8981\u521b\u5efa\u7684\u4e13\u9898\u5bf9\u8c61\u3002\n    :return: \u4e13\u9898\u5bf9\u8c61\u3002\n    \"\"\"\n    resp = client.put(\"/topic\", json=topic.model_dump())\n    resp.raise_for_status()\n    json = resp.json()\n    status = Status.model_validate(json)\n    if status.errCode == 0:\n        topic = Topic.model_validate(json[\"data\"])\n        return topic\n</code></pre>"},{"location":"reference/metaso_sdk/subject/#metaso_sdk.subject.delete_file","title":"delete_file","text":"<pre><code>delete_file(file_or_book: Union[File, Book]) -&gt; bool\n</code></pre> <p>\u5220\u9664\u6587\u4ef6\u3002</p> <p>:param file_or_book: \u5f85\u5220\u9664\u7684 File \u6216\u8005 Book \u5bf9\u8c61\u3002 :return: \u5982\u679c\u5220\u9664\u6210\u529f\uff0c\u8fd4\u56deTrue\u3002\u5426\u5219\u8fd4\u56deFalse\u3002</p> Source code in <code>src/metaso_sdk/subject.py</code> <pre><code>def delete_file(file_or_book: Union[File, Book]) -&gt; bool:\n    \"\"\"\u5220\u9664\u6587\u4ef6\u3002\n\n    :param file_or_book: \u5f85\u5220\u9664\u7684 File \u6216\u8005 Book \u5bf9\u8c61\u3002\n    :return: \u5982\u679c\u5220\u9664\u6210\u529f\uff0c\u8fd4\u56deTrue\u3002\u5426\u5219\u8fd4\u56deFalse\u3002\n    \"\"\"\n    file_id = file_or_book.id if isinstance(file_or_book, File) else file_or_book.fileId\n    resp = client.post(\"/file/trash\", json={\"ids\": [file_id]})\n    resp.raise_for_status()\n    status = Status.model_validate(resp.json())\n    return status.errCode == 0\n</code></pre>"},{"location":"reference/metaso_sdk/subject/#metaso_sdk.subject.delete_topic","title":"delete_topic","text":"<pre><code>delete_topic(topic: Topic) -&gt; bool\n</code></pre> <p>\u5220\u9664\u6307\u5b9a\u7684\u4e13\u9898\u3002</p> <p>:param topic (Topic): \u8981\u5220\u9664\u7684Topic\u5bf9\u8c61\u3002 :return: \u5982\u679c\u6210\u529f\u5220\u9664Topic\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse\u3002</p> Source code in <code>src/metaso_sdk/subject.py</code> <pre><code>def delete_topic(topic: Topic) -&gt; bool:\n    \"\"\"\u5220\u9664\u6307\u5b9a\u7684\u4e13\u9898\u3002\n\n    :param topic (Topic): \u8981\u5220\u9664\u7684Topic\u5bf9\u8c61\u3002\n    :return: \u5982\u679c\u6210\u529f\u5220\u9664Topic\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse\u3002\n    \"\"\"\n    resp = client.post(\"/topic/trash\", json={\"ids\": [topic.id]})\n    resp.raise_for_status()\n    status = Status.model_validate(resp.json())\n    return status.errCode == 0\n</code></pre>"},{"location":"reference/metaso_sdk/subject/#metaso_sdk.subject.update_progress","title":"update_progress","text":"<pre><code>update_progress(\n    file_or_book: Union[File, Book],\n) -&gt; Union[File, Book]\n</code></pre> <p>\u66f4\u65b0\u5904\u7406\u8fdb\u5ea6\u3002</p> <p>:param file_or_book: \u5f85\u66f4\u65b0\u8fdb\u5ea6\u7684 File \u6216\u8005 Book \u5bf9\u8c61\u3002 :return: \u66f4\u65b0 progress \u540e\u7684\u5bf9\u8c61\u3002</p> Source code in <code>src/metaso_sdk/subject.py</code> <pre><code>def update_progress(file_or_book: Union[File, Book]) -&gt; Union[File, Book]:\n    \"\"\"\u66f4\u65b0\u5904\u7406\u8fdb\u5ea6\u3002\n\n    :param file_or_book: \u5f85\u66f4\u65b0\u8fdb\u5ea6\u7684 File \u6216\u8005 Book \u5bf9\u8c61\u3002\n    :return: \u66f4\u65b0 progress \u540e\u7684\u5bf9\u8c61\u3002\n    \"\"\"\n    file_id = file_or_book.id if isinstance(file_or_book, File) else file_or_book.fileId\n    resp = client.get(f\"/file/{file_id}/progress\")\n    resp.raise_for_status()\n    json = resp.json()\n    status = Status.model_validate(json)\n    if status.errCode == 0:\n        file_or_book.progress = json[\"data\"]\n    return file_or_book\n</code></pre>"},{"location":"reference/metaso_sdk/subject/#metaso_sdk.subject.upload_directory","title":"upload_directory","text":"<pre><code>upload_directory(\n    topic: Topic,\n    path: Path,\n    pattern=\"**/*\",\n    *,\n    concurrency=10\n) -&gt; List[File]\n</code></pre> <p>\u9012\u5f52\u4e0a\u4f20\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u5230\u6307\u5b9a\u4e13\u9898\u3002</p> <p>\u53c2\u6570: - topic: \u76ee\u6807\u4e13\u9898\u3002 - path: \u9700\u8981\u4e0a\u4f20\u7684\u672c\u5730\u76ee\u5f55\u8def\u5f84\u3002 - pattern: \u6587\u4ef6\u5339\u914d\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u4e3a\"*/\"\uff0c\u8868\u793a\u5339\u914d\u6240\u6709\u6587\u4ef6\u3002 - concurrency: \u5e76\u53d1\u4e0a\u4f20\u7684\u6570\u91cf\uff0c\u9ed8\u8ba4\u4e3a10\u3002</p> <p>\u8fd4\u56de: - List[File]: \u6210\u529f\u4e0a\u4f20\u7684\u6587\u4ef6\u5217\u8868\u3002</p> Source code in <code>src/metaso_sdk/subject.py</code> <pre><code>def upload_directory(topic: Topic, path: Path, pattern=\"**/*\", *, concurrency=10) -&gt; List[File]:\n    \"\"\"\u9012\u5f52\u4e0a\u4f20\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u5230\u6307\u5b9a\u4e13\u9898\u3002\n\n    \u53c2\u6570:\n    - topic: \u76ee\u6807\u4e13\u9898\u3002\n    - path: \u9700\u8981\u4e0a\u4f20\u7684\u672c\u5730\u76ee\u5f55\u8def\u5f84\u3002\n    - pattern: \u6587\u4ef6\u5339\u914d\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u4e3a\"**/*\"\uff0c\u8868\u793a\u5339\u914d\u6240\u6709\u6587\u4ef6\u3002\n    - concurrency: \u5e76\u53d1\u4e0a\u4f20\u7684\u6570\u91cf\uff0c\u9ed8\u8ba4\u4e3a10\u3002\n\n    \u8fd4\u56de:\n    - List[File]: \u6210\u529f\u4e0a\u4f20\u7684\u6587\u4ef6\u5217\u8868\u3002\n    \"\"\"\n\n    def _upload_file(file) -&gt; File:\n        with file.open(\"rb\") as f:\n            return upload_file(topic, f)\n\n    files = list(\n        Stream(Path(path).glob(pattern))\n        .filter(Path.is_file)\n        .map(_upload_file, concurrency=concurrency)\n        .filter(lambda file: file is not None)\n        .observe(\"files\")\n        .catch(),\n    )\n\n    return files\n</code></pre>"},{"location":"reference/metaso_sdk/subject/#metaso_sdk.subject.upload_file","title":"upload_file","text":"<pre><code>upload_file(topic: Topic, file) -&gt; Optional[File]\n</code></pre> <p>\u4e0a\u4f20\u6587\u4ef6\u5230\u6307\u5b9a\u4e13\u9898\u3002</p> <p>:param topic (Topic): \u6587\u4ef6\u6240\u5c5e\u7684\u4e13\u9898\u3002 :param file: \u5f85\u4e0a\u4f20\u7684\u6587\u4ef6\u5bf9\u8c61\u3002 :return: \u5982\u679c\u6587\u4ef6\u4e0a\u4f20\u6210\u529f\uff0c\u8fd4\u56de\u6587\u4ef6\u5bf9\u8c61\uff1b\u5426\u5219\u8fd4\u56deNone\u3002</p> Source code in <code>src/metaso_sdk/subject.py</code> <pre><code>def upload_file(topic: Topic, file) -&gt; Optional[File]:\n    \"\"\"\u4e0a\u4f20\u6587\u4ef6\u5230\u6307\u5b9a\u4e13\u9898\u3002\n\n    :param topic (Topic): \u6587\u4ef6\u6240\u5c5e\u7684\u4e13\u9898\u3002\n    :param file: \u5f85\u4e0a\u4f20\u7684\u6587\u4ef6\u5bf9\u8c61\u3002\n    :return: \u5982\u679c\u6587\u4ef6\u4e0a\u4f20\u6210\u529f\uff0c\u8fd4\u56de\u6587\u4ef6\u5bf9\u8c61\uff1b\u5426\u5219\u8fd4\u56deNone\u3002\n    \"\"\"\n    resp = client.put(f\"/file/{topic.dirRootId}\", files={\"file\": file})\n    resp.raise_for_status()\n    json = resp.json()\n    status = Status.model_validate(json)\n    if status.errCode == 0:\n        file = File.model_validate(json[\"data\"][0])\n        return file\n</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}